{
    "hints": {
        "update()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "bootstrap((byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2]))void": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify(byte[32][1],(byte[48][2],byte[48][2][2],byte[48][2]))bool": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgNjcyIDI4OCAxOTIKYnl0ZWNibG9jayAweCAweDFhMDExMWVhMzk3ZmU2OWE0YjFiYTdiNjQzNGJhY2Q3NjQ3NzRiODRmMzg1MTJiZjY3MzBkMmEwZjZiMGY2MjQxZWFiZmZmZWIxNTNmZmZmYjlmZWZmZmZmZmZmYWFhYiAweDc2NmIgMHgwNjgxMDEKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhhMGU4MTg3MiAvLyAidXBkYXRlKCl2b2lkIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDMzNjNkMmQ3IC8vICJib290c3RyYXAoKGJ5dGVbNDhdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdKSl2b2lkIgo9PQpibnogbWFpbl9sNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDljNTUwYjQzIC8vICJ2ZXJpZnkoYnl0ZVszMl1bMV0sKGJ5dGVbNDhdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdKSlib29sIgo9PQpibnogbWFpbl9sNQplcnIKbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKc3RvcmUgMQpsb2FkIDAKbG9hZCAxCmNhbGxzdWIgdmVyaWZ5XzcKc3RvcmUgMgpwdXNoYnl0ZXMgMHgxNTFmN2M3NSAvLyAweDE1MWY3Yzc1CnB1c2hieXRlcyAweDAwIC8vIDB4MDAKaW50Y18wIC8vIDAKbG9hZCAyCnNldGJpdApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmNhbGxzdWIgYm9vdHN0cmFwXzYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDc6CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA0IC8vIFVwZGF0ZUFwcGxpY2F0aW9uCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVwZGF0ZV81CmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMAplcnIKbWFpbl9sMTA6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNvbXB1dGVfbGluZWFyX2NvbWJpbmF0aW9uCmNvbXB1dGVsaW5lYXJjb21iaW5hdGlvbl8wOgpwcm90byAyIDEKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmludGNfMiAvLyA2NzIKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgOTYgMApmcmFtZV9kaWcgLTEKY2FsbHN1YiBjdXJ2ZW11bHRpZXhwXzMKZnJhbWVfZGlnIC0yCmludGNfMiAvLyA2NzIKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmV4dHJhY3QgMCA5NgpjYWxsc3ViIGN1cnZlYWRkXzIKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gdmFsaWRfcGFpcmluZwp2YWxpZHBhaXJpbmdfMToKcHJvdG8gMyAxCmJ5dGVjXzAgLy8gIiIKZHVwbiA2CmZyYW1lX2RpZyAtMwpleHRyYWN0IDAgOTYKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgMCA0OApieXRlY18xIC8vIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFiCmZyYW1lX2RpZyAtMwpleHRyYWN0IDAgOTYKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmV4dHJhY3QgNDggMApieXRlY18xIC8vIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFiCmIlCmItCmNvbmNhdApmcmFtZV9kaWcgLTIKZXh0cmFjdCAwIDk2CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjb25jYXQKZnJhbWVfZGlnIC0xCmNvbmNhdApmcmFtZV9kaWcgLTMKaW50Y18zIC8vIDI4OApkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDIKY29uY2F0CmZyYW1lX2RpZyAtMwpleHRyYWN0IDk2IDE5MgpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIC0yCmV4dHJhY3QgOTYgMTkyCmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgNApjb25jYXQKZnJhbWVfZGlnIC0yCmludGNfMyAvLyAyODgKaW50YyA0IC8vIDE5MgpleHRyYWN0MwpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKY29uY2F0CmZyYW1lX2RpZyAtMgpwdXNoaW50IDQ4MCAvLyA0ODAKaW50YyA0IC8vIDE5MgpleHRyYWN0MwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDYKY29uY2F0CmNhbGxzdWIgY3VydmVwYWlyaW5nXzQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gY3VydmVfYWRkCmN1cnZlYWRkXzI6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmVjX2FkZCBCTFMxMl8zODFfRzEKcmV0c3ViCgovLyBjdXJ2ZV9tdWx0aV9leHAKY3VydmVtdWx0aWV4cF8zOgpwcm90byAyIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQplY19tdWx0aV9leHAgQkxTMTJfMzgxX0cxCnJldHN1YgoKLy8gY3VydmVfcGFpcmluZwpjdXJ2ZXBhaXJpbmdfNDoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfcGFpcmluZ19jaGVjayBCTFMxMl8zODFfRzEKcmV0c3ViCgovLyB1cGRhdGUKdXBkYXRlXzU6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmludGNfMSAvLyAxCnJldHVybgoKLy8gYm9vdHN0cmFwCmJvb3RzdHJhcF82Ogpwcm90byAxIDAKdHhuIFNlbmRlcgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlY18yIC8vICJ2ayIKZnJhbWVfZGlnIC0xCmJveF9wdXQKcmV0c3ViCgovLyB2ZXJpZnkKdmVyaWZ5Xzc6CnByb3RvIDIgMQppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmR1cApwdXNoaW50IDEzNTAwIC8vIDEzNTAwCnB1c2hpbnQgMTAgLy8gMTAKKwpzdG9yZSAzCnZlcmlmeV83X2wxOgpsb2FkIDMKZ2xvYmFsIE9wY29kZUJ1ZGdldAo+CmJ6IHZlcmlmeV83X2wzCml0eG5fYmVnaW4KcHVzaGludCA2IC8vIGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KYnl0ZWNfMyAvLyAweDA2ODEwMQppdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQpieXRlY18zIC8vIDB4MDY4MTAxCml0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KaXR4bl9zdWJtaXQKYiB2ZXJpZnlfN19sMQp2ZXJpZnlfN19sMzoKYnl0ZWNfMiAvLyAidmsiCmJveF9nZXQKc3RvcmUgNQpzdG9yZSA0CmxvYWQgNQovLyBWZXJpZmljYXRpb24gS2V5IG5vdCBzZXQKYXNzZXJ0CmxvYWQgNApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIC0yCmNhbGxzdWIgY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzAKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAtMQpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHZhbGlkcGFpcmluZ18xCiEKIQpmcmFtZV9idXJ5IDAKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCnB1c2hpbnQgMCAvLyAwCnJldHVybg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}