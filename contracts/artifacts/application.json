{
    "hints": {
        "update()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "bootstrap((byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2]))void": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify(byte[32][1],(byte[48][2],byte[48][2][2],byte[48][2]))bool": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50Y2Jsb2NrIDAgMSA2NzIgMjg4IDE5MgpieXRlY2Jsb2NrIDB4IDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFiIDB4NzY2YiAweDA2ODEwMQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGEwZTgxODcyIC8vICJ1cGRhdGUoKXZvaWQiCj09CmJueiBtYWluX2w3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzM2M2QyZDcgLy8gImJvb3RzdHJhcCgoYnl0ZVs0OF1bMl0sYnl0ZVs0OF1bMl1bMl0sYnl0ZVs0OF1bMl1bMl0sYnl0ZVs0OF1bMl1bMl0sYnl0ZVs0OF1bMl1bMl0pKXZvaWQiCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4OWM1NTBiNDMgLy8gInZlcmlmeShieXRlWzMyXVsxXSwoYnl0ZVs0OF1bMl0sYnl0ZVs0OF1bMl1bMl0sYnl0ZVs0OF1bMl0pKWJvb2wiCj09CmJueiBtYWluX2w1CmVycgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCnN0b3JlIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpzdG9yZSAxCmxvYWQgMApsb2FkIDEKY2FsbHN1YiB2ZXJpZnlfNwpzdG9yZSAyCnB1c2hieXRlcyAweDE1MWY3Yzc1IC8vIDB4MTUxZjdjNzUKcHVzaGJ5dGVzIDB4MDAgLy8gMHgwMAppbnRjXzAgLy8gMApsb2FkIDIKc2V0Yml0CmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBib290c3RyYXBfNgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDQgLy8gVXBkYXRlQXBwbGljYXRpb24KPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgdXBkYXRlXzUKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDEwCmVycgptYWluX2wxMDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmludGNfMSAvLyAxCnJldHVybgoKLy8gY29tcHV0ZV9saW5lYXJfY29tYmluYXRpb24KY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzA6CnByb3RvIDIgMQpieXRlY18wIC8vICIiCmR1cApmcmFtZV9kaWcgLTIKaW50Y18yIC8vIDY3MgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCA5NiAwCmZyYW1lX2RpZyAtMQpjYWxsc3ViIGN1cnZlbXVsdGlleHBfMwpmcmFtZV9kaWcgLTIKaW50Y18yIC8vIDY3MgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZXh0cmFjdCAwIDk2CmNhbGxzdWIgY3VydmVhZGRfMgpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyB2YWxpZF9wYWlyaW5nCnZhbGlkcGFpcmluZ18xOgpwcm90byAzIDEKYnl0ZWNfMCAvLyAiIgpkdXBuIDYKZnJhbWVfZGlnIC0zCmV4dHJhY3QgMCA5NgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCAwIDQ4CmJ5dGVjXzEgLy8gMHgxYTAxMTFlYTM5N2ZlNjlhNGIxYmE3YjY0MzRiYWNkNzY0Nzc0Yjg0ZjM4NTEyYmY2NzMwZDJhMGY2YjBmNjI0MWVhYmZmZmViMTUzZmZmZmI5ZmVmZmZmZmZmZmFhYWIKZnJhbWVfZGlnIC0zCmV4dHJhY3QgMCA5NgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCA0OCAwCmJ5dGVjXzEgLy8gMHgxYTAxMTFlYTM5N2ZlNjlhNGIxYmE3YjY0MzRiYWNkNzY0Nzc0Yjg0ZjM4NTEyYmY2NzMwZDJhMGY2YjBmNjI0MWVhYmZmZmViMTUzZmZmZmI5ZmVmZmZmZmZmZmFhYWIKYiUKYi0KY29uY2F0CmZyYW1lX2RpZyAtMgpleHRyYWN0IDAgOTYKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNvbmNhdApmcmFtZV9kaWcgLTEKY29uY2F0CmZyYW1lX2RpZyAtMwppbnRjXzMgLy8gMjg4CmRpZyAxCmxlbgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpjb25jYXQKZnJhbWVfZGlnIC0zCmV4dHJhY3QgOTYgMTkyCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwpmcmFtZV9kaWcgLTIKZXh0cmFjdCA5NiAxOTIKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyA0CmNvbmNhdApmcmFtZV9kaWcgLTIKaW50Y18zIC8vIDI4OAppbnRjIDQgLy8gMTkyCmV4dHJhY3QzCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQpjb25jYXQKZnJhbWVfZGlnIC0yCnB1c2hpbnQgNDgwIC8vIDQ4MAppbnRjIDQgLy8gMTkyCmV4dHJhY3QzCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgpjb25jYXQKY2FsbHN1YiBjdXJ2ZXBhaXJpbmdfNApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjdXJ2ZV9hZGQKY3VydmVhZGRfMjoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfYWRkIEJMUzEyXzM4MWcxCnJldHN1YgoKLy8gY3VydmVfbXVsdGlfZXhwCmN1cnZlbXVsdGlleHBfMzoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfbXVsdGlfZXhwIEJMUzEyXzM4MWcxCnJldHN1YgoKLy8gY3VydmVfcGFpcmluZwpjdXJ2ZXBhaXJpbmdfNDoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfcGFpcmluZ19jaGVjayBCTFMxMl8zODFnMQpyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfNToKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBib290c3RyYXAKYm9vdHN0cmFwXzY6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjXzIgLy8gInZrIgpmcmFtZV9kaWcgLTEKYm94X3B1dApyZXRzdWIKCi8vIHZlcmlmeQp2ZXJpZnlfNzoKcHJvdG8gMiAxCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCnB1c2hpbnQgMjAwMDAgLy8gMjAwMDAKcHVzaGludCAxMCAvLyAxMAorCnN0b3JlIDMKdmVyaWZ5XzdfbDE6CmxvYWQgMwpnbG9iYWwgT3Bjb2RlQnVkZ2V0Cj4KYnogdmVyaWZ5XzdfbDMKaXR4bl9iZWdpbgpwdXNoaW50IDYgLy8gYXBwbAppdHhuX2ZpZWxkIFR5cGVFbnVtCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgppdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgpieXRlY18zIC8vIDB4MDY4MTAxCml0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCmJ5dGVjXzMgLy8gMHgwNjgxMDEKaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQppdHhuX3N1Ym1pdApiIHZlcmlmeV83X2wxCnZlcmlmeV83X2wzOgpieXRlY18yIC8vICJ2ayIKYm94X2dldApzdG9yZSA1CnN0b3JlIDQKbG9hZCA1Ci8vIFZlcmlmaWNhdGlvbiBLZXkgbm90IHNldAphc3NlcnQKbG9hZCA0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgLTIKY2FsbHN1YiBjb21wdXRlbGluZWFyY29tYmluYXRpb25fMApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgdmFsaWRwYWlyaW5nXzEKIQohCmZyYW1lX2J1cnkgMApyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}